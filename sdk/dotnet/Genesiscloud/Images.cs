// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace GenesisCloud.PulumiPackage.Genesiscloud
{
    public static class Images
    {
        /// <summary>
        /// Images data source
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Genesiscloud = Pulumi.Genesiscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cloud_images = Genesiscloud.Images.Invoke(new()
        ///     {
        ///         Filter = new Genesiscloud.Inputs.ImagesFilterInputArgs
        ///         {
        ///             Type = "cloud-image",
        ///         },
        ///     });
        /// 
        ///     var snapshots = Genesiscloud.Images.Invoke(new()
        ///     {
        ///         Filter = new Genesiscloud.Inputs.ImagesFilterInputArgs
        ///         {
        ///             Region = "ARC-IS-HAF-1",
        ///             Type = "snapshot",
        ///         },
        ///     });
        /// 
        ///     var preconfigured_images = Genesiscloud.Images.Invoke(new()
        ///     {
        ///         Filter = new Genesiscloud.Inputs.ImagesFilterInputArgs
        ///         {
        ///             Type = "preconfigured",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<ImagesResult> InvokeAsync(ImagesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ImagesResult>("genesiscloud:index/images:Images", args ?? new ImagesArgs(), options.WithDefaults());

        /// <summary>
        /// Images data source
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Genesiscloud = Pulumi.Genesiscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cloud_images = Genesiscloud.Images.Invoke(new()
        ///     {
        ///         Filter = new Genesiscloud.Inputs.ImagesFilterInputArgs
        ///         {
        ///             Type = "cloud-image",
        ///         },
        ///     });
        /// 
        ///     var snapshots = Genesiscloud.Images.Invoke(new()
        ///     {
        ///         Filter = new Genesiscloud.Inputs.ImagesFilterInputArgs
        ///         {
        ///             Region = "ARC-IS-HAF-1",
        ///             Type = "snapshot",
        ///         },
        ///     });
        /// 
        ///     var preconfigured_images = Genesiscloud.Images.Invoke(new()
        ///     {
        ///         Filter = new Genesiscloud.Inputs.ImagesFilterInputArgs
        ///         {
        ///             Type = "preconfigured",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<ImagesResult> Invoke(ImagesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ImagesResult>("genesiscloud:index/images:Images", args ?? new ImagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class ImagesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter", required: true)]
        public Inputs.ImagesFilterArgs Filter { get; set; } = null!;

        [Input("timeouts")]
        public Inputs.ImagesTimeoutsArgs? Timeouts { get; set; }

        public ImagesArgs()
        {
        }
        public static new ImagesArgs Empty => new ImagesArgs();
    }

    public sealed class ImagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter", required: true)]
        public Input<Inputs.ImagesFilterInputArgs> Filter { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.ImagesTimeoutsInputArgs>? Timeouts { get; set; }

        public ImagesInvokeArgs()
        {
        }
        public static new ImagesInvokeArgs Empty => new ImagesInvokeArgs();
    }


    [OutputType]
    public sealed class ImagesResult
    {
        public readonly Outputs.ImagesFilterResult Filter;
        public readonly string Id;
        public readonly ImmutableArray<Outputs.ImagesImageResult> Images;
        public readonly Outputs.ImagesTimeoutsResult? Timeouts;

        [OutputConstructor]
        private ImagesResult(
            Outputs.ImagesFilterResult filter,

            string id,

            ImmutableArray<Outputs.ImagesImageResult> images,

            Outputs.ImagesTimeoutsResult? timeouts)
        {
            Filter = filter;
            Id = id;
            Images = images;
            Timeouts = timeouts;
        }
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace GenesisCloud.PulumiPackage.Genesiscloud
{
    /// <summary>
    /// InstanceStatus resource
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Genesiscloud = GenesisCloud.PulumiPackage.Genesiscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleInstance = new Genesiscloud.Instance("exampleInstance", new()
    ///     {
    ///         Region = "NORD-NO-KRS-1",
    ///         Image = "ubuntu:22.04",
    ///         Type = "vcpu-2_memory-4g",
    ///         SshKeyIds = new[]
    ///         {
    ///             "my-ssh-key-id",
    ///         },
    ///     });
    /// 
    ///     var exampleInstanceStatus = new Genesiscloud.InstanceStatus("exampleInstanceStatus", new()
    ///     {
    ///         InstanceId = exampleInstance.Id,
    ///         Status = "active",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import genesiscloud:index/instanceStatus:InstanceStatus example 18efeec8-94f0-4776-8ff2-5e9b49c74608
    /// ```
    /// </summary>
    [GenesiscloudResourceType("genesiscloud:index/instanceStatus:InstanceStatus")]
    public partial class InstanceStatus : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The target instance status. - The value must be one of: ["active" "stopped"].
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.InstanceStatusTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a InstanceStatus resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceStatus(string name, InstanceStatusArgs args, CustomResourceOptions? options = null)
            : base("genesiscloud:index/instanceStatus:InstanceStatus", name, args ?? new InstanceStatusArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceStatus(string name, Input<string> id, InstanceStatusState? state = null, CustomResourceOptions? options = null)
            : base("genesiscloud:index/instanceStatus:InstanceStatus", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/genesiscloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceStatus resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceStatus Get(string name, Input<string> id, InstanceStatusState? state = null, CustomResourceOptions? options = null)
        {
            return new InstanceStatus(name, id, state, options);
        }
    }

    public sealed class InstanceStatusArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The target instance status. - The value must be one of: ["active" "stopped"].
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.InstanceStatusTimeoutsArgs>? Timeouts { get; set; }

        public InstanceStatusArgs()
        {
        }
        public static new InstanceStatusArgs Empty => new InstanceStatusArgs();
    }

    public sealed class InstanceStatusState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The target instance status. - The value must be one of: ["active" "stopped"].
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("timeouts")]
        public Input<Inputs.InstanceStatusTimeoutsGetArgs>? Timeouts { get; set; }

        public InstanceStatusState()
        {
        }
        public static new InstanceStatusState Empty => new InstanceStatusState();
    }
}

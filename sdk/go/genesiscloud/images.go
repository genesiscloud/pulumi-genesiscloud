// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package genesiscloud

import (
	"context"
	"reflect"

	"github.com/genesiscloud/pulumi-genesiscloud/sdk/go/genesiscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Images data source
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/genesiscloud/pulumi-genesiscloud/sdk/go/genesiscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := genesiscloud.Images(ctx, &genesiscloud.ImagesArgs{
//				Filter: genesiscloud.ImagesFilter{
//					Type: "base-os",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = genesiscloud.Images(ctx, &genesiscloud.ImagesArgs{
//				Filter: genesiscloud.ImagesFilter{
//					Region: pulumi.StringRef("ARC-IS-HAF-1"),
//					Type:   "snapshot",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = genesiscloud.Images(ctx, &genesiscloud.ImagesArgs{
//				Filter: genesiscloud.ImagesFilter{
//					Type: "preconfigured",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Images(ctx *pulumi.Context, args *ImagesArgs, opts ...pulumi.InvokeOption) (*ImagesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ImagesResult
	err := ctx.Invoke("genesiscloud:index/images:Images", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Images.
type ImagesArgs struct {
	Filter   ImagesFilter    `pulumi:"filter"`
	Timeouts *ImagesTimeouts `pulumi:"timeouts"`
}

// A collection of values returned by Images.
type ImagesResult struct {
	Filter   ImagesFilter    `pulumi:"filter"`
	Id       string          `pulumi:"id"`
	Images   []ImagesImage   `pulumi:"images"`
	Timeouts *ImagesTimeouts `pulumi:"timeouts"`
}

func ImagesOutput(ctx *pulumi.Context, args ImagesOutputArgs, opts ...pulumi.InvokeOption) ImagesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ImagesResult, error) {
			args := v.(ImagesArgs)
			r, err := Images(ctx, &args, opts...)
			var s ImagesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ImagesResultOutput)
}

// A collection of arguments for invoking Images.
type ImagesOutputArgs struct {
	Filter   ImagesFilterInput      `pulumi:"filter"`
	Timeouts ImagesTimeoutsPtrInput `pulumi:"timeouts"`
}

func (ImagesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesArgs)(nil)).Elem()
}

// A collection of values returned by Images.
type ImagesResultOutput struct{ *pulumi.OutputState }

func (ImagesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesResult)(nil)).Elem()
}

func (o ImagesResultOutput) ToImagesResultOutput() ImagesResultOutput {
	return o
}

func (o ImagesResultOutput) ToImagesResultOutputWithContext(ctx context.Context) ImagesResultOutput {
	return o
}

func (o ImagesResultOutput) Filter() ImagesFilterOutput {
	return o.ApplyT(func(v ImagesResult) ImagesFilter { return v.Filter }).(ImagesFilterOutput)
}

func (o ImagesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ImagesResultOutput) Images() ImagesImageArrayOutput {
	return o.ApplyT(func(v ImagesResult) []ImagesImage { return v.Images }).(ImagesImageArrayOutput)
}

func (o ImagesResultOutput) Timeouts() ImagesTimeoutsPtrOutput {
	return o.ApplyT(func(v ImagesResult) *ImagesTimeouts { return v.Timeouts }).(ImagesTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ImagesResultOutput{})
}

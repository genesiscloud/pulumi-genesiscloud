// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package genesiscloud

import (
	"context"
	"reflect"

	"github.com/genesiscloud/pulumi-genesiscloud/sdk/go/genesiscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type FilesystemTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// FilesystemTimeoutsInput is an input type that accepts FilesystemTimeoutsArgs and FilesystemTimeoutsOutput values.
// You can construct a concrete instance of `FilesystemTimeoutsInput` via:
//
//	FilesystemTimeoutsArgs{...}
type FilesystemTimeoutsInput interface {
	pulumi.Input

	ToFilesystemTimeoutsOutput() FilesystemTimeoutsOutput
	ToFilesystemTimeoutsOutputWithContext(context.Context) FilesystemTimeoutsOutput
}

type FilesystemTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (FilesystemTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilesystemTimeouts)(nil)).Elem()
}

func (i FilesystemTimeoutsArgs) ToFilesystemTimeoutsOutput() FilesystemTimeoutsOutput {
	return i.ToFilesystemTimeoutsOutputWithContext(context.Background())
}

func (i FilesystemTimeoutsArgs) ToFilesystemTimeoutsOutputWithContext(ctx context.Context) FilesystemTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilesystemTimeoutsOutput)
}

func (i FilesystemTimeoutsArgs) ToFilesystemTimeoutsPtrOutput() FilesystemTimeoutsPtrOutput {
	return i.ToFilesystemTimeoutsPtrOutputWithContext(context.Background())
}

func (i FilesystemTimeoutsArgs) ToFilesystemTimeoutsPtrOutputWithContext(ctx context.Context) FilesystemTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilesystemTimeoutsOutput).ToFilesystemTimeoutsPtrOutputWithContext(ctx)
}

// FilesystemTimeoutsPtrInput is an input type that accepts FilesystemTimeoutsArgs, FilesystemTimeoutsPtr and FilesystemTimeoutsPtrOutput values.
// You can construct a concrete instance of `FilesystemTimeoutsPtrInput` via:
//
//	        FilesystemTimeoutsArgs{...}
//
//	or:
//
//	        nil
type FilesystemTimeoutsPtrInput interface {
	pulumi.Input

	ToFilesystemTimeoutsPtrOutput() FilesystemTimeoutsPtrOutput
	ToFilesystemTimeoutsPtrOutputWithContext(context.Context) FilesystemTimeoutsPtrOutput
}

type filesystemTimeoutsPtrType FilesystemTimeoutsArgs

func FilesystemTimeoutsPtr(v *FilesystemTimeoutsArgs) FilesystemTimeoutsPtrInput {
	return (*filesystemTimeoutsPtrType)(v)
}

func (*filesystemTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FilesystemTimeouts)(nil)).Elem()
}

func (i *filesystemTimeoutsPtrType) ToFilesystemTimeoutsPtrOutput() FilesystemTimeoutsPtrOutput {
	return i.ToFilesystemTimeoutsPtrOutputWithContext(context.Background())
}

func (i *filesystemTimeoutsPtrType) ToFilesystemTimeoutsPtrOutputWithContext(ctx context.Context) FilesystemTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilesystemTimeoutsPtrOutput)
}

type FilesystemTimeoutsOutput struct{ *pulumi.OutputState }

func (FilesystemTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilesystemTimeouts)(nil)).Elem()
}

func (o FilesystemTimeoutsOutput) ToFilesystemTimeoutsOutput() FilesystemTimeoutsOutput {
	return o
}

func (o FilesystemTimeoutsOutput) ToFilesystemTimeoutsOutputWithContext(ctx context.Context) FilesystemTimeoutsOutput {
	return o
}

func (o FilesystemTimeoutsOutput) ToFilesystemTimeoutsPtrOutput() FilesystemTimeoutsPtrOutput {
	return o.ToFilesystemTimeoutsPtrOutputWithContext(context.Background())
}

func (o FilesystemTimeoutsOutput) ToFilesystemTimeoutsPtrOutputWithContext(ctx context.Context) FilesystemTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FilesystemTimeouts) *FilesystemTimeouts {
		return &v
	}).(FilesystemTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o FilesystemTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilesystemTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o FilesystemTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilesystemTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o FilesystemTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilesystemTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o FilesystemTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilesystemTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type FilesystemTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (FilesystemTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FilesystemTimeouts)(nil)).Elem()
}

func (o FilesystemTimeoutsPtrOutput) ToFilesystemTimeoutsPtrOutput() FilesystemTimeoutsPtrOutput {
	return o
}

func (o FilesystemTimeoutsPtrOutput) ToFilesystemTimeoutsPtrOutputWithContext(ctx context.Context) FilesystemTimeoutsPtrOutput {
	return o
}

func (o FilesystemTimeoutsPtrOutput) Elem() FilesystemTimeoutsOutput {
	return o.ApplyT(func(v *FilesystemTimeouts) FilesystemTimeouts {
		if v != nil {
			return *v
		}
		var ret FilesystemTimeouts
		return ret
	}).(FilesystemTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o FilesystemTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FilesystemTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o FilesystemTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FilesystemTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o FilesystemTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FilesystemTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o FilesystemTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FilesystemTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type FloatingIpTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// FloatingIpTimeoutsInput is an input type that accepts FloatingIpTimeoutsArgs and FloatingIpTimeoutsOutput values.
// You can construct a concrete instance of `FloatingIpTimeoutsInput` via:
//
//	FloatingIpTimeoutsArgs{...}
type FloatingIpTimeoutsInput interface {
	pulumi.Input

	ToFloatingIpTimeoutsOutput() FloatingIpTimeoutsOutput
	ToFloatingIpTimeoutsOutputWithContext(context.Context) FloatingIpTimeoutsOutput
}

type FloatingIpTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (FloatingIpTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FloatingIpTimeouts)(nil)).Elem()
}

func (i FloatingIpTimeoutsArgs) ToFloatingIpTimeoutsOutput() FloatingIpTimeoutsOutput {
	return i.ToFloatingIpTimeoutsOutputWithContext(context.Background())
}

func (i FloatingIpTimeoutsArgs) ToFloatingIpTimeoutsOutputWithContext(ctx context.Context) FloatingIpTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloatingIpTimeoutsOutput)
}

func (i FloatingIpTimeoutsArgs) ToFloatingIpTimeoutsPtrOutput() FloatingIpTimeoutsPtrOutput {
	return i.ToFloatingIpTimeoutsPtrOutputWithContext(context.Background())
}

func (i FloatingIpTimeoutsArgs) ToFloatingIpTimeoutsPtrOutputWithContext(ctx context.Context) FloatingIpTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloatingIpTimeoutsOutput).ToFloatingIpTimeoutsPtrOutputWithContext(ctx)
}

// FloatingIpTimeoutsPtrInput is an input type that accepts FloatingIpTimeoutsArgs, FloatingIpTimeoutsPtr and FloatingIpTimeoutsPtrOutput values.
// You can construct a concrete instance of `FloatingIpTimeoutsPtrInput` via:
//
//	        FloatingIpTimeoutsArgs{...}
//
//	or:
//
//	        nil
type FloatingIpTimeoutsPtrInput interface {
	pulumi.Input

	ToFloatingIpTimeoutsPtrOutput() FloatingIpTimeoutsPtrOutput
	ToFloatingIpTimeoutsPtrOutputWithContext(context.Context) FloatingIpTimeoutsPtrOutput
}

type floatingIpTimeoutsPtrType FloatingIpTimeoutsArgs

func FloatingIpTimeoutsPtr(v *FloatingIpTimeoutsArgs) FloatingIpTimeoutsPtrInput {
	return (*floatingIpTimeoutsPtrType)(v)
}

func (*floatingIpTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FloatingIpTimeouts)(nil)).Elem()
}

func (i *floatingIpTimeoutsPtrType) ToFloatingIpTimeoutsPtrOutput() FloatingIpTimeoutsPtrOutput {
	return i.ToFloatingIpTimeoutsPtrOutputWithContext(context.Background())
}

func (i *floatingIpTimeoutsPtrType) ToFloatingIpTimeoutsPtrOutputWithContext(ctx context.Context) FloatingIpTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloatingIpTimeoutsPtrOutput)
}

type FloatingIpTimeoutsOutput struct{ *pulumi.OutputState }

func (FloatingIpTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FloatingIpTimeouts)(nil)).Elem()
}

func (o FloatingIpTimeoutsOutput) ToFloatingIpTimeoutsOutput() FloatingIpTimeoutsOutput {
	return o
}

func (o FloatingIpTimeoutsOutput) ToFloatingIpTimeoutsOutputWithContext(ctx context.Context) FloatingIpTimeoutsOutput {
	return o
}

func (o FloatingIpTimeoutsOutput) ToFloatingIpTimeoutsPtrOutput() FloatingIpTimeoutsPtrOutput {
	return o.ToFloatingIpTimeoutsPtrOutputWithContext(context.Background())
}

func (o FloatingIpTimeoutsOutput) ToFloatingIpTimeoutsPtrOutputWithContext(ctx context.Context) FloatingIpTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FloatingIpTimeouts) *FloatingIpTimeouts {
		return &v
	}).(FloatingIpTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o FloatingIpTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FloatingIpTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o FloatingIpTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FloatingIpTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o FloatingIpTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FloatingIpTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o FloatingIpTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FloatingIpTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type FloatingIpTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (FloatingIpTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FloatingIpTimeouts)(nil)).Elem()
}

func (o FloatingIpTimeoutsPtrOutput) ToFloatingIpTimeoutsPtrOutput() FloatingIpTimeoutsPtrOutput {
	return o
}

func (o FloatingIpTimeoutsPtrOutput) ToFloatingIpTimeoutsPtrOutputWithContext(ctx context.Context) FloatingIpTimeoutsPtrOutput {
	return o
}

func (o FloatingIpTimeoutsPtrOutput) Elem() FloatingIpTimeoutsOutput {
	return o.ApplyT(func(v *FloatingIpTimeouts) FloatingIpTimeouts {
		if v != nil {
			return *v
		}
		var ret FloatingIpTimeouts
		return ret
	}).(FloatingIpTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o FloatingIpTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIpTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o FloatingIpTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIpTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o FloatingIpTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIpTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o FloatingIpTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIpTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type ImagesFilter struct {
	// Filter by the region identifier.
	//   - The value must be one of: ["EUC-DE-MUC-1" "EUW-GB-MNC-1" "EUW-NL-AMS-1" "NA-CA-FTS-1" "NA-CA-MNZ-1" "NA-CA-PRG-1" "NORD-NO-KRS-1"].
	Region *string `pulumi:"region"`
	// Filter by the kind of image.
	//   - The value must be one of: ["cloud-image"].
	Type string `pulumi:"type"`
}

// ImagesFilterInput is an input type that accepts ImagesFilterArgs and ImagesFilterOutput values.
// You can construct a concrete instance of `ImagesFilterInput` via:
//
//	ImagesFilterArgs{...}
type ImagesFilterInput interface {
	pulumi.Input

	ToImagesFilterOutput() ImagesFilterOutput
	ToImagesFilterOutputWithContext(context.Context) ImagesFilterOutput
}

type ImagesFilterArgs struct {
	// Filter by the region identifier.
	//   - The value must be one of: ["EUC-DE-MUC-1" "EUW-GB-MNC-1" "EUW-NL-AMS-1" "NA-CA-FTS-1" "NA-CA-MNZ-1" "NA-CA-PRG-1" "NORD-NO-KRS-1"].
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Filter by the kind of image.
	//   - The value must be one of: ["cloud-image"].
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImagesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesFilter)(nil)).Elem()
}

func (i ImagesFilterArgs) ToImagesFilterOutput() ImagesFilterOutput {
	return i.ToImagesFilterOutputWithContext(context.Background())
}

func (i ImagesFilterArgs) ToImagesFilterOutputWithContext(ctx context.Context) ImagesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesFilterOutput)
}

type ImagesFilterOutput struct{ *pulumi.OutputState }

func (ImagesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesFilter)(nil)).Elem()
}

func (o ImagesFilterOutput) ToImagesFilterOutput() ImagesFilterOutput {
	return o
}

func (o ImagesFilterOutput) ToImagesFilterOutputWithContext(ctx context.Context) ImagesFilterOutput {
	return o
}

// Filter by the region identifier.
//   - The value must be one of: ["EUC-DE-MUC-1" "EUW-GB-MNC-1" "EUW-NL-AMS-1" "NA-CA-FTS-1" "NA-CA-MNZ-1" "NA-CA-PRG-1" "NORD-NO-KRS-1"].
func (o ImagesFilterOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesFilter) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Filter by the kind of image.
//   - The value must be one of: ["cloud-image"].
func (o ImagesFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesFilter) string { return v.Type }).(pulumi.StringOutput)
}

type ImagesImage struct {
	// The timestamp when this image was created in RFC 3339.
	CreatedAt string `pulumi:"createdAt"`
	// A unique number that can be used to identify and reference a specific image.
	Id string `pulumi:"id"`
	// The display name that has been given to an image.
	Name string `pulumi:"name"`
	// The list of regions in which this image can be used in.
	Regions []string `pulumi:"regions"`
	// The image slug.
	Slug string `pulumi:"slug"`
	// Describes the kind of image.
	Type string `pulumi:"type"`
	// The list of versions if this is a cloud-image otherwise empty.
	Versions []string `pulumi:"versions"`
}

// ImagesImageInput is an input type that accepts ImagesImageArgs and ImagesImageOutput values.
// You can construct a concrete instance of `ImagesImageInput` via:
//
//	ImagesImageArgs{...}
type ImagesImageInput interface {
	pulumi.Input

	ToImagesImageOutput() ImagesImageOutput
	ToImagesImageOutputWithContext(context.Context) ImagesImageOutput
}

type ImagesImageArgs struct {
	// The timestamp when this image was created in RFC 3339.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// A unique number that can be used to identify and reference a specific image.
	Id pulumi.StringInput `pulumi:"id"`
	// The display name that has been given to an image.
	Name pulumi.StringInput `pulumi:"name"`
	// The list of regions in which this image can be used in.
	Regions pulumi.StringArrayInput `pulumi:"regions"`
	// The image slug.
	Slug pulumi.StringInput `pulumi:"slug"`
	// Describes the kind of image.
	Type pulumi.StringInput `pulumi:"type"`
	// The list of versions if this is a cloud-image otherwise empty.
	Versions pulumi.StringArrayInput `pulumi:"versions"`
}

func (ImagesImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesImage)(nil)).Elem()
}

func (i ImagesImageArgs) ToImagesImageOutput() ImagesImageOutput {
	return i.ToImagesImageOutputWithContext(context.Background())
}

func (i ImagesImageArgs) ToImagesImageOutputWithContext(ctx context.Context) ImagesImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesImageOutput)
}

// ImagesImageArrayInput is an input type that accepts ImagesImageArray and ImagesImageArrayOutput values.
// You can construct a concrete instance of `ImagesImageArrayInput` via:
//
//	ImagesImageArray{ ImagesImageArgs{...} }
type ImagesImageArrayInput interface {
	pulumi.Input

	ToImagesImageArrayOutput() ImagesImageArrayOutput
	ToImagesImageArrayOutputWithContext(context.Context) ImagesImageArrayOutput
}

type ImagesImageArray []ImagesImageInput

func (ImagesImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagesImage)(nil)).Elem()
}

func (i ImagesImageArray) ToImagesImageArrayOutput() ImagesImageArrayOutput {
	return i.ToImagesImageArrayOutputWithContext(context.Background())
}

func (i ImagesImageArray) ToImagesImageArrayOutputWithContext(ctx context.Context) ImagesImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesImageArrayOutput)
}

type ImagesImageOutput struct{ *pulumi.OutputState }

func (ImagesImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesImage)(nil)).Elem()
}

func (o ImagesImageOutput) ToImagesImageOutput() ImagesImageOutput {
	return o
}

func (o ImagesImageOutput) ToImagesImageOutputWithContext(ctx context.Context) ImagesImageOutput {
	return o
}

// The timestamp when this image was created in RFC 3339.
func (o ImagesImageOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// A unique number that can be used to identify and reference a specific image.
func (o ImagesImageOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Id }).(pulumi.StringOutput)
}

// The display name that has been given to an image.
func (o ImagesImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Name }).(pulumi.StringOutput)
}

// The list of regions in which this image can be used in.
func (o ImagesImageOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImagesImage) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// The image slug.
func (o ImagesImageOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Slug }).(pulumi.StringOutput)
}

// Describes the kind of image.
func (o ImagesImageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Type }).(pulumi.StringOutput)
}

// The list of versions if this is a cloud-image otherwise empty.
func (o ImagesImageOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImagesImage) []string { return v.Versions }).(pulumi.StringArrayOutput)
}

type ImagesImageArrayOutput struct{ *pulumi.OutputState }

func (ImagesImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagesImage)(nil)).Elem()
}

func (o ImagesImageArrayOutput) ToImagesImageArrayOutput() ImagesImageArrayOutput {
	return o
}

func (o ImagesImageArrayOutput) ToImagesImageArrayOutputWithContext(ctx context.Context) ImagesImageArrayOutput {
	return o
}

func (o ImagesImageArrayOutput) Index(i pulumi.IntInput) ImagesImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImagesImage {
		return vs[0].([]ImagesImage)[vs[1].(int)]
	}).(ImagesImageOutput)
}

type ImagesTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Read *string `pulumi:"read"`
}

// ImagesTimeoutsInput is an input type that accepts ImagesTimeoutsArgs and ImagesTimeoutsOutput values.
// You can construct a concrete instance of `ImagesTimeoutsInput` via:
//
//	ImagesTimeoutsArgs{...}
type ImagesTimeoutsInput interface {
	pulumi.Input

	ToImagesTimeoutsOutput() ImagesTimeoutsOutput
	ToImagesTimeoutsOutputWithContext(context.Context) ImagesTimeoutsOutput
}

type ImagesTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Read pulumi.StringPtrInput `pulumi:"read"`
}

func (ImagesTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesTimeouts)(nil)).Elem()
}

func (i ImagesTimeoutsArgs) ToImagesTimeoutsOutput() ImagesTimeoutsOutput {
	return i.ToImagesTimeoutsOutputWithContext(context.Background())
}

func (i ImagesTimeoutsArgs) ToImagesTimeoutsOutputWithContext(ctx context.Context) ImagesTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesTimeoutsOutput)
}

func (i ImagesTimeoutsArgs) ToImagesTimeoutsPtrOutput() ImagesTimeoutsPtrOutput {
	return i.ToImagesTimeoutsPtrOutputWithContext(context.Background())
}

func (i ImagesTimeoutsArgs) ToImagesTimeoutsPtrOutputWithContext(ctx context.Context) ImagesTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesTimeoutsOutput).ToImagesTimeoutsPtrOutputWithContext(ctx)
}

// ImagesTimeoutsPtrInput is an input type that accepts ImagesTimeoutsArgs, ImagesTimeoutsPtr and ImagesTimeoutsPtrOutput values.
// You can construct a concrete instance of `ImagesTimeoutsPtrInput` via:
//
//	        ImagesTimeoutsArgs{...}
//
//	or:
//
//	        nil
type ImagesTimeoutsPtrInput interface {
	pulumi.Input

	ToImagesTimeoutsPtrOutput() ImagesTimeoutsPtrOutput
	ToImagesTimeoutsPtrOutputWithContext(context.Context) ImagesTimeoutsPtrOutput
}

type imagesTimeoutsPtrType ImagesTimeoutsArgs

func ImagesTimeoutsPtr(v *ImagesTimeoutsArgs) ImagesTimeoutsPtrInput {
	return (*imagesTimeoutsPtrType)(v)
}

func (*imagesTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagesTimeouts)(nil)).Elem()
}

func (i *imagesTimeoutsPtrType) ToImagesTimeoutsPtrOutput() ImagesTimeoutsPtrOutput {
	return i.ToImagesTimeoutsPtrOutputWithContext(context.Background())
}

func (i *imagesTimeoutsPtrType) ToImagesTimeoutsPtrOutputWithContext(ctx context.Context) ImagesTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesTimeoutsPtrOutput)
}

type ImagesTimeoutsOutput struct{ *pulumi.OutputState }

func (ImagesTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesTimeouts)(nil)).Elem()
}

func (o ImagesTimeoutsOutput) ToImagesTimeoutsOutput() ImagesTimeoutsOutput {
	return o
}

func (o ImagesTimeoutsOutput) ToImagesTimeoutsOutputWithContext(ctx context.Context) ImagesTimeoutsOutput {
	return o
}

func (o ImagesTimeoutsOutput) ToImagesTimeoutsPtrOutput() ImagesTimeoutsPtrOutput {
	return o.ToImagesTimeoutsPtrOutputWithContext(context.Background())
}

func (o ImagesTimeoutsOutput) ToImagesTimeoutsPtrOutputWithContext(ctx context.Context) ImagesTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagesTimeouts) *ImagesTimeouts {
		return &v
	}).(ImagesTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ImagesTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

type ImagesTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (ImagesTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagesTimeouts)(nil)).Elem()
}

func (o ImagesTimeoutsPtrOutput) ToImagesTimeoutsPtrOutput() ImagesTimeoutsPtrOutput {
	return o
}

func (o ImagesTimeoutsPtrOutput) ToImagesTimeoutsPtrOutputWithContext(ctx context.Context) ImagesTimeoutsPtrOutput {
	return o
}

func (o ImagesTimeoutsPtrOutput) Elem() ImagesTimeoutsOutput {
	return o.ApplyT(func(v *ImagesTimeouts) ImagesTimeouts {
		if v != nil {
			return *v
		}
		var ret ImagesTimeouts
		return ret
	}).(ImagesTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ImagesTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagesTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

type InstanceMetadata struct {
	// A plain text bash script or "cloud-config" file that will be executed after the first instance boot. It is limited to 64 KiB in size. You can use it to configure your instance, e.g. installing the NVIDIA GPU driver. Learn more about [startup scripts and installing the GPU driver](https://support.genesiscloud.com/support/solutions/articles/47001122478).
	//   - If the value of this attribute changes, the resource will be replaced.
	StartupScript *string `pulumi:"startupScript"`
}

// InstanceMetadataInput is an input type that accepts InstanceMetadataArgs and InstanceMetadataOutput values.
// You can construct a concrete instance of `InstanceMetadataInput` via:
//
//	InstanceMetadataArgs{...}
type InstanceMetadataInput interface {
	pulumi.Input

	ToInstanceMetadataOutput() InstanceMetadataOutput
	ToInstanceMetadataOutputWithContext(context.Context) InstanceMetadataOutput
}

type InstanceMetadataArgs struct {
	// A plain text bash script or "cloud-config" file that will be executed after the first instance boot. It is limited to 64 KiB in size. You can use it to configure your instance, e.g. installing the NVIDIA GPU driver. Learn more about [startup scripts and installing the GPU driver](https://support.genesiscloud.com/support/solutions/articles/47001122478).
	//   - If the value of this attribute changes, the resource will be replaced.
	StartupScript pulumi.StringPtrInput `pulumi:"startupScript"`
}

func (InstanceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMetadata)(nil)).Elem()
}

func (i InstanceMetadataArgs) ToInstanceMetadataOutput() InstanceMetadataOutput {
	return i.ToInstanceMetadataOutputWithContext(context.Background())
}

func (i InstanceMetadataArgs) ToInstanceMetadataOutputWithContext(ctx context.Context) InstanceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMetadataOutput)
}

func (i InstanceMetadataArgs) ToInstanceMetadataPtrOutput() InstanceMetadataPtrOutput {
	return i.ToInstanceMetadataPtrOutputWithContext(context.Background())
}

func (i InstanceMetadataArgs) ToInstanceMetadataPtrOutputWithContext(ctx context.Context) InstanceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMetadataOutput).ToInstanceMetadataPtrOutputWithContext(ctx)
}

// InstanceMetadataPtrInput is an input type that accepts InstanceMetadataArgs, InstanceMetadataPtr and InstanceMetadataPtrOutput values.
// You can construct a concrete instance of `InstanceMetadataPtrInput` via:
//
//	        InstanceMetadataArgs{...}
//
//	or:
//
//	        nil
type InstanceMetadataPtrInput interface {
	pulumi.Input

	ToInstanceMetadataPtrOutput() InstanceMetadataPtrOutput
	ToInstanceMetadataPtrOutputWithContext(context.Context) InstanceMetadataPtrOutput
}

type instanceMetadataPtrType InstanceMetadataArgs

func InstanceMetadataPtr(v *InstanceMetadataArgs) InstanceMetadataPtrInput {
	return (*instanceMetadataPtrType)(v)
}

func (*instanceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceMetadata)(nil)).Elem()
}

func (i *instanceMetadataPtrType) ToInstanceMetadataPtrOutput() InstanceMetadataPtrOutput {
	return i.ToInstanceMetadataPtrOutputWithContext(context.Background())
}

func (i *instanceMetadataPtrType) ToInstanceMetadataPtrOutputWithContext(ctx context.Context) InstanceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMetadataPtrOutput)
}

type InstanceMetadataOutput struct{ *pulumi.OutputState }

func (InstanceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMetadata)(nil)).Elem()
}

func (o InstanceMetadataOutput) ToInstanceMetadataOutput() InstanceMetadataOutput {
	return o
}

func (o InstanceMetadataOutput) ToInstanceMetadataOutputWithContext(ctx context.Context) InstanceMetadataOutput {
	return o
}

func (o InstanceMetadataOutput) ToInstanceMetadataPtrOutput() InstanceMetadataPtrOutput {
	return o.ToInstanceMetadataPtrOutputWithContext(context.Background())
}

func (o InstanceMetadataOutput) ToInstanceMetadataPtrOutputWithContext(ctx context.Context) InstanceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceMetadata) *InstanceMetadata {
		return &v
	}).(InstanceMetadataPtrOutput)
}

// A plain text bash script or "cloud-config" file that will be executed after the first instance boot. It is limited to 64 KiB in size. You can use it to configure your instance, e.g. installing the NVIDIA GPU driver. Learn more about [startup scripts and installing the GPU driver](https://support.genesiscloud.com/support/solutions/articles/47001122478).
//   - If the value of this attribute changes, the resource will be replaced.
func (o InstanceMetadataOutput) StartupScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceMetadata) *string { return v.StartupScript }).(pulumi.StringPtrOutput)
}

type InstanceMetadataPtrOutput struct{ *pulumi.OutputState }

func (InstanceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceMetadata)(nil)).Elem()
}

func (o InstanceMetadataPtrOutput) ToInstanceMetadataPtrOutput() InstanceMetadataPtrOutput {
	return o
}

func (o InstanceMetadataPtrOutput) ToInstanceMetadataPtrOutputWithContext(ctx context.Context) InstanceMetadataPtrOutput {
	return o
}

func (o InstanceMetadataPtrOutput) Elem() InstanceMetadataOutput {
	return o.ApplyT(func(v *InstanceMetadata) InstanceMetadata {
		if v != nil {
			return *v
		}
		var ret InstanceMetadata
		return ret
	}).(InstanceMetadataOutput)
}

// A plain text bash script or "cloud-config" file that will be executed after the first instance boot. It is limited to 64 KiB in size. You can use it to configure your instance, e.g. installing the NVIDIA GPU driver. Learn more about [startup scripts and installing the GPU driver](https://support.genesiscloud.com/support/solutions/articles/47001122478).
//   - If the value of this attribute changes, the resource will be replaced.
func (o InstanceMetadataPtrOutput) StartupScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.StartupScript
	}).(pulumi.StringPtrOutput)
}

type InstanceStatusTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// InstanceStatusTimeoutsInput is an input type that accepts InstanceStatusTimeoutsArgs and InstanceStatusTimeoutsOutput values.
// You can construct a concrete instance of `InstanceStatusTimeoutsInput` via:
//
//	InstanceStatusTimeoutsArgs{...}
type InstanceStatusTimeoutsInput interface {
	pulumi.Input

	ToInstanceStatusTimeoutsOutput() InstanceStatusTimeoutsOutput
	ToInstanceStatusTimeoutsOutputWithContext(context.Context) InstanceStatusTimeoutsOutput
}

type InstanceStatusTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (InstanceStatusTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStatusTimeouts)(nil)).Elem()
}

func (i InstanceStatusTimeoutsArgs) ToInstanceStatusTimeoutsOutput() InstanceStatusTimeoutsOutput {
	return i.ToInstanceStatusTimeoutsOutputWithContext(context.Background())
}

func (i InstanceStatusTimeoutsArgs) ToInstanceStatusTimeoutsOutputWithContext(ctx context.Context) InstanceStatusTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStatusTimeoutsOutput)
}

func (i InstanceStatusTimeoutsArgs) ToInstanceStatusTimeoutsPtrOutput() InstanceStatusTimeoutsPtrOutput {
	return i.ToInstanceStatusTimeoutsPtrOutputWithContext(context.Background())
}

func (i InstanceStatusTimeoutsArgs) ToInstanceStatusTimeoutsPtrOutputWithContext(ctx context.Context) InstanceStatusTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStatusTimeoutsOutput).ToInstanceStatusTimeoutsPtrOutputWithContext(ctx)
}

// InstanceStatusTimeoutsPtrInput is an input type that accepts InstanceStatusTimeoutsArgs, InstanceStatusTimeoutsPtr and InstanceStatusTimeoutsPtrOutput values.
// You can construct a concrete instance of `InstanceStatusTimeoutsPtrInput` via:
//
//	        InstanceStatusTimeoutsArgs{...}
//
//	or:
//
//	        nil
type InstanceStatusTimeoutsPtrInput interface {
	pulumi.Input

	ToInstanceStatusTimeoutsPtrOutput() InstanceStatusTimeoutsPtrOutput
	ToInstanceStatusTimeoutsPtrOutputWithContext(context.Context) InstanceStatusTimeoutsPtrOutput
}

type instanceStatusTimeoutsPtrType InstanceStatusTimeoutsArgs

func InstanceStatusTimeoutsPtr(v *InstanceStatusTimeoutsArgs) InstanceStatusTimeoutsPtrInput {
	return (*instanceStatusTimeoutsPtrType)(v)
}

func (*instanceStatusTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceStatusTimeouts)(nil)).Elem()
}

func (i *instanceStatusTimeoutsPtrType) ToInstanceStatusTimeoutsPtrOutput() InstanceStatusTimeoutsPtrOutput {
	return i.ToInstanceStatusTimeoutsPtrOutputWithContext(context.Background())
}

func (i *instanceStatusTimeoutsPtrType) ToInstanceStatusTimeoutsPtrOutputWithContext(ctx context.Context) InstanceStatusTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStatusTimeoutsPtrOutput)
}

type InstanceStatusTimeoutsOutput struct{ *pulumi.OutputState }

func (InstanceStatusTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStatusTimeouts)(nil)).Elem()
}

func (o InstanceStatusTimeoutsOutput) ToInstanceStatusTimeoutsOutput() InstanceStatusTimeoutsOutput {
	return o
}

func (o InstanceStatusTimeoutsOutput) ToInstanceStatusTimeoutsOutputWithContext(ctx context.Context) InstanceStatusTimeoutsOutput {
	return o
}

func (o InstanceStatusTimeoutsOutput) ToInstanceStatusTimeoutsPtrOutput() InstanceStatusTimeoutsPtrOutput {
	return o.ToInstanceStatusTimeoutsPtrOutputWithContext(context.Background())
}

func (o InstanceStatusTimeoutsOutput) ToInstanceStatusTimeoutsPtrOutputWithContext(ctx context.Context) InstanceStatusTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceStatusTimeouts) *InstanceStatusTimeouts {
		return &v
	}).(InstanceStatusTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o InstanceStatusTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceStatusTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o InstanceStatusTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceStatusTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o InstanceStatusTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceStatusTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o InstanceStatusTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceStatusTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type InstanceStatusTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (InstanceStatusTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceStatusTimeouts)(nil)).Elem()
}

func (o InstanceStatusTimeoutsPtrOutput) ToInstanceStatusTimeoutsPtrOutput() InstanceStatusTimeoutsPtrOutput {
	return o
}

func (o InstanceStatusTimeoutsPtrOutput) ToInstanceStatusTimeoutsPtrOutputWithContext(ctx context.Context) InstanceStatusTimeoutsPtrOutput {
	return o
}

func (o InstanceStatusTimeoutsPtrOutput) Elem() InstanceStatusTimeoutsOutput {
	return o.ApplyT(func(v *InstanceStatusTimeouts) InstanceStatusTimeouts {
		if v != nil {
			return *v
		}
		var ret InstanceStatusTimeouts
		return ret
	}).(InstanceStatusTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o InstanceStatusTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceStatusTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o InstanceStatusTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceStatusTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o InstanceStatusTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceStatusTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o InstanceStatusTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceStatusTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type InstanceTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// InstanceTimeoutsInput is an input type that accepts InstanceTimeoutsArgs and InstanceTimeoutsOutput values.
// You can construct a concrete instance of `InstanceTimeoutsInput` via:
//
//	InstanceTimeoutsArgs{...}
type InstanceTimeoutsInput interface {
	pulumi.Input

	ToInstanceTimeoutsOutput() InstanceTimeoutsOutput
	ToInstanceTimeoutsOutputWithContext(context.Context) InstanceTimeoutsOutput
}

type InstanceTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (InstanceTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTimeouts)(nil)).Elem()
}

func (i InstanceTimeoutsArgs) ToInstanceTimeoutsOutput() InstanceTimeoutsOutput {
	return i.ToInstanceTimeoutsOutputWithContext(context.Background())
}

func (i InstanceTimeoutsArgs) ToInstanceTimeoutsOutputWithContext(ctx context.Context) InstanceTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTimeoutsOutput)
}

func (i InstanceTimeoutsArgs) ToInstanceTimeoutsPtrOutput() InstanceTimeoutsPtrOutput {
	return i.ToInstanceTimeoutsPtrOutputWithContext(context.Background())
}

func (i InstanceTimeoutsArgs) ToInstanceTimeoutsPtrOutputWithContext(ctx context.Context) InstanceTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTimeoutsOutput).ToInstanceTimeoutsPtrOutputWithContext(ctx)
}

// InstanceTimeoutsPtrInput is an input type that accepts InstanceTimeoutsArgs, InstanceTimeoutsPtr and InstanceTimeoutsPtrOutput values.
// You can construct a concrete instance of `InstanceTimeoutsPtrInput` via:
//
//	        InstanceTimeoutsArgs{...}
//
//	or:
//
//	        nil
type InstanceTimeoutsPtrInput interface {
	pulumi.Input

	ToInstanceTimeoutsPtrOutput() InstanceTimeoutsPtrOutput
	ToInstanceTimeoutsPtrOutputWithContext(context.Context) InstanceTimeoutsPtrOutput
}

type instanceTimeoutsPtrType InstanceTimeoutsArgs

func InstanceTimeoutsPtr(v *InstanceTimeoutsArgs) InstanceTimeoutsPtrInput {
	return (*instanceTimeoutsPtrType)(v)
}

func (*instanceTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTimeouts)(nil)).Elem()
}

func (i *instanceTimeoutsPtrType) ToInstanceTimeoutsPtrOutput() InstanceTimeoutsPtrOutput {
	return i.ToInstanceTimeoutsPtrOutputWithContext(context.Background())
}

func (i *instanceTimeoutsPtrType) ToInstanceTimeoutsPtrOutputWithContext(ctx context.Context) InstanceTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTimeoutsPtrOutput)
}

type InstanceTimeoutsOutput struct{ *pulumi.OutputState }

func (InstanceTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTimeouts)(nil)).Elem()
}

func (o InstanceTimeoutsOutput) ToInstanceTimeoutsOutput() InstanceTimeoutsOutput {
	return o
}

func (o InstanceTimeoutsOutput) ToInstanceTimeoutsOutputWithContext(ctx context.Context) InstanceTimeoutsOutput {
	return o
}

func (o InstanceTimeoutsOutput) ToInstanceTimeoutsPtrOutput() InstanceTimeoutsPtrOutput {
	return o.ToInstanceTimeoutsPtrOutputWithContext(context.Background())
}

func (o InstanceTimeoutsOutput) ToInstanceTimeoutsPtrOutputWithContext(ctx context.Context) InstanceTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceTimeouts) *InstanceTimeouts {
		return &v
	}).(InstanceTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o InstanceTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o InstanceTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o InstanceTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o InstanceTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type InstanceTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (InstanceTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTimeouts)(nil)).Elem()
}

func (o InstanceTimeoutsPtrOutput) ToInstanceTimeoutsPtrOutput() InstanceTimeoutsPtrOutput {
	return o
}

func (o InstanceTimeoutsPtrOutput) ToInstanceTimeoutsPtrOutputWithContext(ctx context.Context) InstanceTimeoutsPtrOutput {
	return o
}

func (o InstanceTimeoutsPtrOutput) Elem() InstanceTimeoutsOutput {
	return o.ApplyT(func(v *InstanceTimeouts) InstanceTimeouts {
		if v != nil {
			return *v
		}
		var ret InstanceTimeouts
		return ret
	}).(InstanceTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o InstanceTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o InstanceTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o InstanceTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o InstanceTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type SSHKeyTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// SSHKeyTimeoutsInput is an input type that accepts SSHKeyTimeoutsArgs and SSHKeyTimeoutsOutput values.
// You can construct a concrete instance of `SSHKeyTimeoutsInput` via:
//
//	SSHKeyTimeoutsArgs{...}
type SSHKeyTimeoutsInput interface {
	pulumi.Input

	ToSSHKeyTimeoutsOutput() SSHKeyTimeoutsOutput
	ToSSHKeyTimeoutsOutputWithContext(context.Context) SSHKeyTimeoutsOutput
}

type SSHKeyTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (SSHKeyTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SSHKeyTimeouts)(nil)).Elem()
}

func (i SSHKeyTimeoutsArgs) ToSSHKeyTimeoutsOutput() SSHKeyTimeoutsOutput {
	return i.ToSSHKeyTimeoutsOutputWithContext(context.Background())
}

func (i SSHKeyTimeoutsArgs) ToSSHKeyTimeoutsOutputWithContext(ctx context.Context) SSHKeyTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHKeyTimeoutsOutput)
}

func (i SSHKeyTimeoutsArgs) ToSSHKeyTimeoutsPtrOutput() SSHKeyTimeoutsPtrOutput {
	return i.ToSSHKeyTimeoutsPtrOutputWithContext(context.Background())
}

func (i SSHKeyTimeoutsArgs) ToSSHKeyTimeoutsPtrOutputWithContext(ctx context.Context) SSHKeyTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHKeyTimeoutsOutput).ToSSHKeyTimeoutsPtrOutputWithContext(ctx)
}

// SSHKeyTimeoutsPtrInput is an input type that accepts SSHKeyTimeoutsArgs, SSHKeyTimeoutsPtr and SSHKeyTimeoutsPtrOutput values.
// You can construct a concrete instance of `SSHKeyTimeoutsPtrInput` via:
//
//	        SSHKeyTimeoutsArgs{...}
//
//	or:
//
//	        nil
type SSHKeyTimeoutsPtrInput interface {
	pulumi.Input

	ToSSHKeyTimeoutsPtrOutput() SSHKeyTimeoutsPtrOutput
	ToSSHKeyTimeoutsPtrOutputWithContext(context.Context) SSHKeyTimeoutsPtrOutput
}

type sshkeyTimeoutsPtrType SSHKeyTimeoutsArgs

func SSHKeyTimeoutsPtr(v *SSHKeyTimeoutsArgs) SSHKeyTimeoutsPtrInput {
	return (*sshkeyTimeoutsPtrType)(v)
}

func (*sshkeyTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SSHKeyTimeouts)(nil)).Elem()
}

func (i *sshkeyTimeoutsPtrType) ToSSHKeyTimeoutsPtrOutput() SSHKeyTimeoutsPtrOutput {
	return i.ToSSHKeyTimeoutsPtrOutputWithContext(context.Background())
}

func (i *sshkeyTimeoutsPtrType) ToSSHKeyTimeoutsPtrOutputWithContext(ctx context.Context) SSHKeyTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHKeyTimeoutsPtrOutput)
}

type SSHKeyTimeoutsOutput struct{ *pulumi.OutputState }

func (SSHKeyTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSHKeyTimeouts)(nil)).Elem()
}

func (o SSHKeyTimeoutsOutput) ToSSHKeyTimeoutsOutput() SSHKeyTimeoutsOutput {
	return o
}

func (o SSHKeyTimeoutsOutput) ToSSHKeyTimeoutsOutputWithContext(ctx context.Context) SSHKeyTimeoutsOutput {
	return o
}

func (o SSHKeyTimeoutsOutput) ToSSHKeyTimeoutsPtrOutput() SSHKeyTimeoutsPtrOutput {
	return o.ToSSHKeyTimeoutsPtrOutputWithContext(context.Background())
}

func (o SSHKeyTimeoutsOutput) ToSSHKeyTimeoutsPtrOutputWithContext(ctx context.Context) SSHKeyTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SSHKeyTimeouts) *SSHKeyTimeouts {
		return &v
	}).(SSHKeyTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o SSHKeyTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSHKeyTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o SSHKeyTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSHKeyTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o SSHKeyTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSHKeyTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o SSHKeyTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSHKeyTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type SSHKeyTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (SSHKeyTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSHKeyTimeouts)(nil)).Elem()
}

func (o SSHKeyTimeoutsPtrOutput) ToSSHKeyTimeoutsPtrOutput() SSHKeyTimeoutsPtrOutput {
	return o
}

func (o SSHKeyTimeoutsPtrOutput) ToSSHKeyTimeoutsPtrOutputWithContext(ctx context.Context) SSHKeyTimeoutsPtrOutput {
	return o
}

func (o SSHKeyTimeoutsPtrOutput) Elem() SSHKeyTimeoutsOutput {
	return o.ApplyT(func(v *SSHKeyTimeouts) SSHKeyTimeouts {
		if v != nil {
			return *v
		}
		var ret SSHKeyTimeouts
		return ret
	}).(SSHKeyTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o SSHKeyTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSHKeyTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o SSHKeyTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSHKeyTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o SSHKeyTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSHKeyTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o SSHKeyTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSHKeyTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type SecurityGroupRule struct {
	// The direction of the rule.
	//   - The value must be one of: ["egress" "ingress"].
	Direction string `pulumi:"direction"`
	// The maximum port number of the rule.
	//   - The value must be between 1 and 65535.
	PortRangeMax *int `pulumi:"portRangeMax"`
	// The minimum port number of the rule.
	//   - The value must be between 1 and 65535.
	PortRangeMin *int `pulumi:"portRangeMin"`
	// The protocol of the rule.
	//   - The value must be one of: ["all" "icmp" "tcp" "udp"].
	Protocol string `pulumi:"protocol"`
}

// SecurityGroupRuleInput is an input type that accepts SecurityGroupRuleArgs and SecurityGroupRuleOutput values.
// You can construct a concrete instance of `SecurityGroupRuleInput` via:
//
//	SecurityGroupRuleArgs{...}
type SecurityGroupRuleInput interface {
	pulumi.Input

	ToSecurityGroupRuleOutput() SecurityGroupRuleOutput
	ToSecurityGroupRuleOutputWithContext(context.Context) SecurityGroupRuleOutput
}

type SecurityGroupRuleArgs struct {
	// The direction of the rule.
	//   - The value must be one of: ["egress" "ingress"].
	Direction pulumi.StringInput `pulumi:"direction"`
	// The maximum port number of the rule.
	//   - The value must be between 1 and 65535.
	PortRangeMax pulumi.IntPtrInput `pulumi:"portRangeMax"`
	// The minimum port number of the rule.
	//   - The value must be between 1 and 65535.
	PortRangeMin pulumi.IntPtrInput `pulumi:"portRangeMin"`
	// The protocol of the rule.
	//   - The value must be one of: ["all" "icmp" "tcp" "udp"].
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (SecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupRuleArgs) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return i.ToSecurityGroupRuleOutputWithContext(context.Background())
}

func (i SecurityGroupRuleArgs) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleOutput)
}

// SecurityGroupRuleArrayInput is an input type that accepts SecurityGroupRuleArray and SecurityGroupRuleArrayOutput values.
// You can construct a concrete instance of `SecurityGroupRuleArrayInput` via:
//
//	SecurityGroupRuleArray{ SecurityGroupRuleArgs{...} }
type SecurityGroupRuleArrayInput interface {
	pulumi.Input

	ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput
	ToSecurityGroupRuleArrayOutputWithContext(context.Context) SecurityGroupRuleArrayOutput
}

type SecurityGroupRuleArray []SecurityGroupRuleInput

func (SecurityGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupRuleArray) ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput {
	return i.ToSecurityGroupRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGroupRuleArray) ToSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleArrayOutput)
}

type SecurityGroupRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return o
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return o
}

// The direction of the rule.
//   - The value must be one of: ["egress" "ingress"].
func (o SecurityGroupRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupRule) string { return v.Direction }).(pulumi.StringOutput)
}

// The maximum port number of the rule.
//   - The value must be between 1 and 65535.
func (o SecurityGroupRuleOutput) PortRangeMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRule) *int { return v.PortRangeMax }).(pulumi.IntPtrOutput)
}

// The minimum port number of the rule.
//   - The value must be between 1 and 65535.
func (o SecurityGroupRuleOutput) PortRangeMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRule) *int { return v.PortRangeMin }).(pulumi.IntPtrOutput)
}

// The protocol of the rule.
//   - The value must be one of: ["all" "icmp" "tcp" "udp"].
func (o SecurityGroupRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupRule) string { return v.Protocol }).(pulumi.StringOutput)
}

type SecurityGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleArrayOutput) ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupRuleArrayOutput) ToSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupRuleArrayOutput) Index(i pulumi.IntInput) SecurityGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupRule {
		return vs[0].([]SecurityGroupRule)[vs[1].(int)]
	}).(SecurityGroupRuleOutput)
}

type SecurityGroupTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// SecurityGroupTimeoutsInput is an input type that accepts SecurityGroupTimeoutsArgs and SecurityGroupTimeoutsOutput values.
// You can construct a concrete instance of `SecurityGroupTimeoutsInput` via:
//
//	SecurityGroupTimeoutsArgs{...}
type SecurityGroupTimeoutsInput interface {
	pulumi.Input

	ToSecurityGroupTimeoutsOutput() SecurityGroupTimeoutsOutput
	ToSecurityGroupTimeoutsOutputWithContext(context.Context) SecurityGroupTimeoutsOutput
}

type SecurityGroupTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (SecurityGroupTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupTimeouts)(nil)).Elem()
}

func (i SecurityGroupTimeoutsArgs) ToSecurityGroupTimeoutsOutput() SecurityGroupTimeoutsOutput {
	return i.ToSecurityGroupTimeoutsOutputWithContext(context.Background())
}

func (i SecurityGroupTimeoutsArgs) ToSecurityGroupTimeoutsOutputWithContext(ctx context.Context) SecurityGroupTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupTimeoutsOutput)
}

func (i SecurityGroupTimeoutsArgs) ToSecurityGroupTimeoutsPtrOutput() SecurityGroupTimeoutsPtrOutput {
	return i.ToSecurityGroupTimeoutsPtrOutputWithContext(context.Background())
}

func (i SecurityGroupTimeoutsArgs) ToSecurityGroupTimeoutsPtrOutputWithContext(ctx context.Context) SecurityGroupTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupTimeoutsOutput).ToSecurityGroupTimeoutsPtrOutputWithContext(ctx)
}

// SecurityGroupTimeoutsPtrInput is an input type that accepts SecurityGroupTimeoutsArgs, SecurityGroupTimeoutsPtr and SecurityGroupTimeoutsPtrOutput values.
// You can construct a concrete instance of `SecurityGroupTimeoutsPtrInput` via:
//
//	        SecurityGroupTimeoutsArgs{...}
//
//	or:
//
//	        nil
type SecurityGroupTimeoutsPtrInput interface {
	pulumi.Input

	ToSecurityGroupTimeoutsPtrOutput() SecurityGroupTimeoutsPtrOutput
	ToSecurityGroupTimeoutsPtrOutputWithContext(context.Context) SecurityGroupTimeoutsPtrOutput
}

type securityGroupTimeoutsPtrType SecurityGroupTimeoutsArgs

func SecurityGroupTimeoutsPtr(v *SecurityGroupTimeoutsArgs) SecurityGroupTimeoutsPtrInput {
	return (*securityGroupTimeoutsPtrType)(v)
}

func (*securityGroupTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupTimeouts)(nil)).Elem()
}

func (i *securityGroupTimeoutsPtrType) ToSecurityGroupTimeoutsPtrOutput() SecurityGroupTimeoutsPtrOutput {
	return i.ToSecurityGroupTimeoutsPtrOutputWithContext(context.Background())
}

func (i *securityGroupTimeoutsPtrType) ToSecurityGroupTimeoutsPtrOutputWithContext(ctx context.Context) SecurityGroupTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupTimeoutsPtrOutput)
}

type SecurityGroupTimeoutsOutput struct{ *pulumi.OutputState }

func (SecurityGroupTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupTimeouts)(nil)).Elem()
}

func (o SecurityGroupTimeoutsOutput) ToSecurityGroupTimeoutsOutput() SecurityGroupTimeoutsOutput {
	return o
}

func (o SecurityGroupTimeoutsOutput) ToSecurityGroupTimeoutsOutputWithContext(ctx context.Context) SecurityGroupTimeoutsOutput {
	return o
}

func (o SecurityGroupTimeoutsOutput) ToSecurityGroupTimeoutsPtrOutput() SecurityGroupTimeoutsPtrOutput {
	return o.ToSecurityGroupTimeoutsPtrOutputWithContext(context.Background())
}

func (o SecurityGroupTimeoutsOutput) ToSecurityGroupTimeoutsPtrOutputWithContext(ctx context.Context) SecurityGroupTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityGroupTimeouts) *SecurityGroupTimeouts {
		return &v
	}).(SecurityGroupTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o SecurityGroupTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o SecurityGroupTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o SecurityGroupTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o SecurityGroupTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type SecurityGroupTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (SecurityGroupTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupTimeouts)(nil)).Elem()
}

func (o SecurityGroupTimeoutsPtrOutput) ToSecurityGroupTimeoutsPtrOutput() SecurityGroupTimeoutsPtrOutput {
	return o
}

func (o SecurityGroupTimeoutsPtrOutput) ToSecurityGroupTimeoutsPtrOutputWithContext(ctx context.Context) SecurityGroupTimeoutsPtrOutput {
	return o
}

func (o SecurityGroupTimeoutsPtrOutput) Elem() SecurityGroupTimeoutsOutput {
	return o.ApplyT(func(v *SecurityGroupTimeouts) SecurityGroupTimeouts {
		if v != nil {
			return *v
		}
		var ret SecurityGroupTimeouts
		return ret
	}).(SecurityGroupTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o SecurityGroupTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o SecurityGroupTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o SecurityGroupTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o SecurityGroupTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type SnapshotTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// SnapshotTimeoutsInput is an input type that accepts SnapshotTimeoutsArgs and SnapshotTimeoutsOutput values.
// You can construct a concrete instance of `SnapshotTimeoutsInput` via:
//
//	SnapshotTimeoutsArgs{...}
type SnapshotTimeoutsInput interface {
	pulumi.Input

	ToSnapshotTimeoutsOutput() SnapshotTimeoutsOutput
	ToSnapshotTimeoutsOutputWithContext(context.Context) SnapshotTimeoutsOutput
}

type SnapshotTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (SnapshotTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotTimeouts)(nil)).Elem()
}

func (i SnapshotTimeoutsArgs) ToSnapshotTimeoutsOutput() SnapshotTimeoutsOutput {
	return i.ToSnapshotTimeoutsOutputWithContext(context.Background())
}

func (i SnapshotTimeoutsArgs) ToSnapshotTimeoutsOutputWithContext(ctx context.Context) SnapshotTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotTimeoutsOutput)
}

func (i SnapshotTimeoutsArgs) ToSnapshotTimeoutsPtrOutput() SnapshotTimeoutsPtrOutput {
	return i.ToSnapshotTimeoutsPtrOutputWithContext(context.Background())
}

func (i SnapshotTimeoutsArgs) ToSnapshotTimeoutsPtrOutputWithContext(ctx context.Context) SnapshotTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotTimeoutsOutput).ToSnapshotTimeoutsPtrOutputWithContext(ctx)
}

// SnapshotTimeoutsPtrInput is an input type that accepts SnapshotTimeoutsArgs, SnapshotTimeoutsPtr and SnapshotTimeoutsPtrOutput values.
// You can construct a concrete instance of `SnapshotTimeoutsPtrInput` via:
//
//	        SnapshotTimeoutsArgs{...}
//
//	or:
//
//	        nil
type SnapshotTimeoutsPtrInput interface {
	pulumi.Input

	ToSnapshotTimeoutsPtrOutput() SnapshotTimeoutsPtrOutput
	ToSnapshotTimeoutsPtrOutputWithContext(context.Context) SnapshotTimeoutsPtrOutput
}

type snapshotTimeoutsPtrType SnapshotTimeoutsArgs

func SnapshotTimeoutsPtr(v *SnapshotTimeoutsArgs) SnapshotTimeoutsPtrInput {
	return (*snapshotTimeoutsPtrType)(v)
}

func (*snapshotTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotTimeouts)(nil)).Elem()
}

func (i *snapshotTimeoutsPtrType) ToSnapshotTimeoutsPtrOutput() SnapshotTimeoutsPtrOutput {
	return i.ToSnapshotTimeoutsPtrOutputWithContext(context.Background())
}

func (i *snapshotTimeoutsPtrType) ToSnapshotTimeoutsPtrOutputWithContext(ctx context.Context) SnapshotTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotTimeoutsPtrOutput)
}

type SnapshotTimeoutsOutput struct{ *pulumi.OutputState }

func (SnapshotTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotTimeouts)(nil)).Elem()
}

func (o SnapshotTimeoutsOutput) ToSnapshotTimeoutsOutput() SnapshotTimeoutsOutput {
	return o
}

func (o SnapshotTimeoutsOutput) ToSnapshotTimeoutsOutputWithContext(ctx context.Context) SnapshotTimeoutsOutput {
	return o
}

func (o SnapshotTimeoutsOutput) ToSnapshotTimeoutsPtrOutput() SnapshotTimeoutsPtrOutput {
	return o.ToSnapshotTimeoutsPtrOutputWithContext(context.Background())
}

func (o SnapshotTimeoutsOutput) ToSnapshotTimeoutsPtrOutputWithContext(ctx context.Context) SnapshotTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SnapshotTimeouts) *SnapshotTimeouts {
		return &v
	}).(SnapshotTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o SnapshotTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o SnapshotTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o SnapshotTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o SnapshotTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type SnapshotTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (SnapshotTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotTimeouts)(nil)).Elem()
}

func (o SnapshotTimeoutsPtrOutput) ToSnapshotTimeoutsPtrOutput() SnapshotTimeoutsPtrOutput {
	return o
}

func (o SnapshotTimeoutsPtrOutput) ToSnapshotTimeoutsPtrOutputWithContext(ctx context.Context) SnapshotTimeoutsPtrOutput {
	return o
}

func (o SnapshotTimeoutsPtrOutput) Elem() SnapshotTimeoutsOutput {
	return o.ApplyT(func(v *SnapshotTimeouts) SnapshotTimeouts {
		if v != nil {
			return *v
		}
		var ret SnapshotTimeouts
		return ret
	}).(SnapshotTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o SnapshotTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o SnapshotTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o SnapshotTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o SnapshotTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type VolumeTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// VolumeTimeoutsInput is an input type that accepts VolumeTimeoutsArgs and VolumeTimeoutsOutput values.
// You can construct a concrete instance of `VolumeTimeoutsInput` via:
//
//	VolumeTimeoutsArgs{...}
type VolumeTimeoutsInput interface {
	pulumi.Input

	ToVolumeTimeoutsOutput() VolumeTimeoutsOutput
	ToVolumeTimeoutsOutputWithContext(context.Context) VolumeTimeoutsOutput
}

type VolumeTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (VolumeTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTimeouts)(nil)).Elem()
}

func (i VolumeTimeoutsArgs) ToVolumeTimeoutsOutput() VolumeTimeoutsOutput {
	return i.ToVolumeTimeoutsOutputWithContext(context.Background())
}

func (i VolumeTimeoutsArgs) ToVolumeTimeoutsOutputWithContext(ctx context.Context) VolumeTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTimeoutsOutput)
}

func (i VolumeTimeoutsArgs) ToVolumeTimeoutsPtrOutput() VolumeTimeoutsPtrOutput {
	return i.ToVolumeTimeoutsPtrOutputWithContext(context.Background())
}

func (i VolumeTimeoutsArgs) ToVolumeTimeoutsPtrOutputWithContext(ctx context.Context) VolumeTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTimeoutsOutput).ToVolumeTimeoutsPtrOutputWithContext(ctx)
}

// VolumeTimeoutsPtrInput is an input type that accepts VolumeTimeoutsArgs, VolumeTimeoutsPtr and VolumeTimeoutsPtrOutput values.
// You can construct a concrete instance of `VolumeTimeoutsPtrInput` via:
//
//	        VolumeTimeoutsArgs{...}
//
//	or:
//
//	        nil
type VolumeTimeoutsPtrInput interface {
	pulumi.Input

	ToVolumeTimeoutsPtrOutput() VolumeTimeoutsPtrOutput
	ToVolumeTimeoutsPtrOutputWithContext(context.Context) VolumeTimeoutsPtrOutput
}

type volumeTimeoutsPtrType VolumeTimeoutsArgs

func VolumeTimeoutsPtr(v *VolumeTimeoutsArgs) VolumeTimeoutsPtrInput {
	return (*volumeTimeoutsPtrType)(v)
}

func (*volumeTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeTimeouts)(nil)).Elem()
}

func (i *volumeTimeoutsPtrType) ToVolumeTimeoutsPtrOutput() VolumeTimeoutsPtrOutput {
	return i.ToVolumeTimeoutsPtrOutputWithContext(context.Background())
}

func (i *volumeTimeoutsPtrType) ToVolumeTimeoutsPtrOutputWithContext(ctx context.Context) VolumeTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTimeoutsPtrOutput)
}

type VolumeTimeoutsOutput struct{ *pulumi.OutputState }

func (VolumeTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTimeouts)(nil)).Elem()
}

func (o VolumeTimeoutsOutput) ToVolumeTimeoutsOutput() VolumeTimeoutsOutput {
	return o
}

func (o VolumeTimeoutsOutput) ToVolumeTimeoutsOutputWithContext(ctx context.Context) VolumeTimeoutsOutput {
	return o
}

func (o VolumeTimeoutsOutput) ToVolumeTimeoutsPtrOutput() VolumeTimeoutsPtrOutput {
	return o.ToVolumeTimeoutsPtrOutputWithContext(context.Background())
}

func (o VolumeTimeoutsOutput) ToVolumeTimeoutsPtrOutputWithContext(ctx context.Context) VolumeTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeTimeouts) *VolumeTimeouts {
		return &v
	}).(VolumeTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o VolumeTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o VolumeTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o VolumeTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o VolumeTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type VolumeTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (VolumeTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeTimeouts)(nil)).Elem()
}

func (o VolumeTimeoutsPtrOutput) ToVolumeTimeoutsPtrOutput() VolumeTimeoutsPtrOutput {
	return o
}

func (o VolumeTimeoutsPtrOutput) ToVolumeTimeoutsPtrOutputWithContext(ctx context.Context) VolumeTimeoutsPtrOutput {
	return o
}

func (o VolumeTimeoutsPtrOutput) Elem() VolumeTimeoutsOutput {
	return o.ApplyT(func(v *VolumeTimeouts) VolumeTimeouts {
		if v != nil {
			return *v
		}
		var ret VolumeTimeouts
		return ret
	}).(VolumeTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o VolumeTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o VolumeTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o VolumeTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o VolumeTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FilesystemTimeoutsInput)(nil)).Elem(), FilesystemTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilesystemTimeoutsPtrInput)(nil)).Elem(), FilesystemTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FloatingIpTimeoutsInput)(nil)).Elem(), FloatingIpTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FloatingIpTimeoutsPtrInput)(nil)).Elem(), FloatingIpTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesFilterInput)(nil)).Elem(), ImagesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesImageInput)(nil)).Elem(), ImagesImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesImageArrayInput)(nil)).Elem(), ImagesImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesTimeoutsInput)(nil)).Elem(), ImagesTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesTimeoutsPtrInput)(nil)).Elem(), ImagesTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMetadataInput)(nil)).Elem(), InstanceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMetadataPtrInput)(nil)).Elem(), InstanceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStatusTimeoutsInput)(nil)).Elem(), InstanceStatusTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStatusTimeoutsPtrInput)(nil)).Elem(), InstanceStatusTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTimeoutsInput)(nil)).Elem(), InstanceTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTimeoutsPtrInput)(nil)).Elem(), InstanceTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SSHKeyTimeoutsInput)(nil)).Elem(), SSHKeyTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SSHKeyTimeoutsPtrInput)(nil)).Elem(), SSHKeyTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleInput)(nil)).Elem(), SecurityGroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleArrayInput)(nil)).Elem(), SecurityGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupTimeoutsInput)(nil)).Elem(), SecurityGroupTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupTimeoutsPtrInput)(nil)).Elem(), SecurityGroupTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotTimeoutsInput)(nil)).Elem(), SnapshotTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotTimeoutsPtrInput)(nil)).Elem(), SnapshotTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTimeoutsInput)(nil)).Elem(), VolumeTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTimeoutsPtrInput)(nil)).Elem(), VolumeTimeoutsArgs{})
	pulumi.RegisterOutputType(FilesystemTimeoutsOutput{})
	pulumi.RegisterOutputType(FilesystemTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(FloatingIpTimeoutsOutput{})
	pulumi.RegisterOutputType(FloatingIpTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(ImagesFilterOutput{})
	pulumi.RegisterOutputType(ImagesImageOutput{})
	pulumi.RegisterOutputType(ImagesImageArrayOutput{})
	pulumi.RegisterOutputType(ImagesTimeoutsOutput{})
	pulumi.RegisterOutputType(ImagesTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(InstanceMetadataOutput{})
	pulumi.RegisterOutputType(InstanceMetadataPtrOutput{})
	pulumi.RegisterOutputType(InstanceStatusTimeoutsOutput{})
	pulumi.RegisterOutputType(InstanceStatusTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(InstanceTimeoutsOutput{})
	pulumi.RegisterOutputType(InstanceTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(SSHKeyTimeoutsOutput{})
	pulumi.RegisterOutputType(SSHKeyTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupTimeoutsOutput{})
	pulumi.RegisterOutputType(SecurityGroupTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(SnapshotTimeoutsOutput{})
	pulumi.RegisterOutputType(SnapshotTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(VolumeTimeoutsOutput{})
	pulumi.RegisterOutputType(VolumeTimeoutsPtrOutput{})
}

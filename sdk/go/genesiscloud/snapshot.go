// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package genesiscloud

import (
	"context"
	"reflect"

	"github.com/genesiscloud/pulumi-genesiscloud/sdk/go/genesiscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Snapshot resource
//
// ## Import
//
// ```sh
// $ pulumi import genesiscloud:index/snapshot:Snapshot example 18efeec8-94f0-4776-8ff2-5e9b49c74608
// ```
type Snapshot struct {
	pulumi.CustomResourceState

	// The timestamp when this snapshot was created in RFC 3339.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The human-readable name for the snapshot.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region identifier. Should only be explicity specified when using the 'source_snapshot_id'.
	Region pulumi.StringOutput `pulumi:"region"`
	// Target region for snapshot replication. When specified, also creates a copy of the snapshot in the given region. If
	// omitted, the snapshot exists only in the current region.
	ReplicatedRegion pulumi.StringPtrOutput `pulumi:"replicatedRegion"`
	// Flag to retain the snapshot when the resource is deleted. - Sets the default value "false" if the attribute is not set.
	RetainOnDelete pulumi.BoolOutput `pulumi:"retainOnDelete"`
	// The storage size of this snapshot given in GiB.
	Size pulumi.IntOutput `pulumi:"size"`
	// The id of the source instance from which this snapshot was derived. - If the value of this attribute changes, the
	// resource will be replaced.
	SourceInstanceId pulumi.StringPtrOutput `pulumi:"sourceInstanceId"`
	// The id of the source snapshot from which this snapsot was derived. - If the value of this attribute changes, the
	// resource will be replaced.
	SourceSnapshotId pulumi.StringPtrOutput `pulumi:"sourceSnapshotId"`
	// The snapshot status.
	Status   pulumi.StringOutput       `pulumi:"status"`
	Timeouts SnapshotTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		args = &SnapshotArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("genesiscloud:index/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("genesiscloud:index/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	// The timestamp when this snapshot was created in RFC 3339.
	CreatedAt *string `pulumi:"createdAt"`
	// The human-readable name for the snapshot.
	Name *string `pulumi:"name"`
	// The region identifier. Should only be explicity specified when using the 'source_snapshot_id'.
	Region *string `pulumi:"region"`
	// Target region for snapshot replication. When specified, also creates a copy of the snapshot in the given region. If
	// omitted, the snapshot exists only in the current region.
	ReplicatedRegion *string `pulumi:"replicatedRegion"`
	// Flag to retain the snapshot when the resource is deleted. - Sets the default value "false" if the attribute is not set.
	RetainOnDelete *bool `pulumi:"retainOnDelete"`
	// The storage size of this snapshot given in GiB.
	Size *int `pulumi:"size"`
	// The id of the source instance from which this snapshot was derived. - If the value of this attribute changes, the
	// resource will be replaced.
	SourceInstanceId *string `pulumi:"sourceInstanceId"`
	// The id of the source snapshot from which this snapsot was derived. - If the value of this attribute changes, the
	// resource will be replaced.
	SourceSnapshotId *string `pulumi:"sourceSnapshotId"`
	// The snapshot status.
	Status   *string           `pulumi:"status"`
	Timeouts *SnapshotTimeouts `pulumi:"timeouts"`
}

type SnapshotState struct {
	// The timestamp when this snapshot was created in RFC 3339.
	CreatedAt pulumi.StringPtrInput
	// The human-readable name for the snapshot.
	Name pulumi.StringPtrInput
	// The region identifier. Should only be explicity specified when using the 'source_snapshot_id'.
	Region pulumi.StringPtrInput
	// Target region for snapshot replication. When specified, also creates a copy of the snapshot in the given region. If
	// omitted, the snapshot exists only in the current region.
	ReplicatedRegion pulumi.StringPtrInput
	// Flag to retain the snapshot when the resource is deleted. - Sets the default value "false" if the attribute is not set.
	RetainOnDelete pulumi.BoolPtrInput
	// The storage size of this snapshot given in GiB.
	Size pulumi.IntPtrInput
	// The id of the source instance from which this snapshot was derived. - If the value of this attribute changes, the
	// resource will be replaced.
	SourceInstanceId pulumi.StringPtrInput
	// The id of the source snapshot from which this snapsot was derived. - If the value of this attribute changes, the
	// resource will be replaced.
	SourceSnapshotId pulumi.StringPtrInput
	// The snapshot status.
	Status   pulumi.StringPtrInput
	Timeouts SnapshotTimeoutsPtrInput
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// The human-readable name for the snapshot.
	Name *string `pulumi:"name"`
	// The region identifier. Should only be explicity specified when using the 'source_snapshot_id'.
	Region *string `pulumi:"region"`
	// Target region for snapshot replication. When specified, also creates a copy of the snapshot in the given region. If
	// omitted, the snapshot exists only in the current region.
	ReplicatedRegion *string `pulumi:"replicatedRegion"`
	// Flag to retain the snapshot when the resource is deleted. - Sets the default value "false" if the attribute is not set.
	RetainOnDelete *bool `pulumi:"retainOnDelete"`
	// The id of the source instance from which this snapshot was derived. - If the value of this attribute changes, the
	// resource will be replaced.
	SourceInstanceId *string `pulumi:"sourceInstanceId"`
	// The id of the source snapshot from which this snapsot was derived. - If the value of this attribute changes, the
	// resource will be replaced.
	SourceSnapshotId *string           `pulumi:"sourceSnapshotId"`
	Timeouts         *SnapshotTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// The human-readable name for the snapshot.
	Name pulumi.StringPtrInput
	// The region identifier. Should only be explicity specified when using the 'source_snapshot_id'.
	Region pulumi.StringPtrInput
	// Target region for snapshot replication. When specified, also creates a copy of the snapshot in the given region. If
	// omitted, the snapshot exists only in the current region.
	ReplicatedRegion pulumi.StringPtrInput
	// Flag to retain the snapshot when the resource is deleted. - Sets the default value "false" if the attribute is not set.
	RetainOnDelete pulumi.BoolPtrInput
	// The id of the source instance from which this snapshot was derived. - If the value of this attribute changes, the
	// resource will be replaced.
	SourceInstanceId pulumi.StringPtrInput
	// The id of the source snapshot from which this snapsot was derived. - If the value of this attribute changes, the
	// resource will be replaced.
	SourceSnapshotId pulumi.StringPtrInput
	Timeouts         SnapshotTimeoutsPtrInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

// SnapshotArrayInput is an input type that accepts SnapshotArray and SnapshotArrayOutput values.
// You can construct a concrete instance of `SnapshotArrayInput` via:
//
//	SnapshotArray{ SnapshotArgs{...} }
type SnapshotArrayInput interface {
	pulumi.Input

	ToSnapshotArrayOutput() SnapshotArrayOutput
	ToSnapshotArrayOutputWithContext(context.Context) SnapshotArrayOutput
}

type SnapshotArray []SnapshotInput

func (SnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (i SnapshotArray) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return i.ToSnapshotArrayOutputWithContext(context.Background())
}

func (i SnapshotArray) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotArrayOutput)
}

// SnapshotMapInput is an input type that accepts SnapshotMap and SnapshotMapOutput values.
// You can construct a concrete instance of `SnapshotMapInput` via:
//
//	SnapshotMap{ "key": SnapshotArgs{...} }
type SnapshotMapInput interface {
	pulumi.Input

	ToSnapshotMapOutput() SnapshotMapOutput
	ToSnapshotMapOutputWithContext(context.Context) SnapshotMapOutput
}

type SnapshotMap map[string]SnapshotInput

func (SnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (i SnapshotMap) ToSnapshotMapOutput() SnapshotMapOutput {
	return i.ToSnapshotMapOutputWithContext(context.Background())
}

func (i SnapshotMap) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotMapOutput)
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

// The timestamp when this snapshot was created in RFC 3339.
func (o SnapshotOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The human-readable name for the snapshot.
func (o SnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region identifier. Should only be explicity specified when using the 'source_snapshot_id'.
func (o SnapshotOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Target region for snapshot replication. When specified, also creates a copy of the snapshot in the given region. If
// omitted, the snapshot exists only in the current region.
func (o SnapshotOutput) ReplicatedRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.ReplicatedRegion }).(pulumi.StringPtrOutput)
}

// Flag to retain the snapshot when the resource is deleted. - Sets the default value "false" if the attribute is not set.
func (o SnapshotOutput) RetainOnDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.RetainOnDelete }).(pulumi.BoolOutput)
}

// The storage size of this snapshot given in GiB.
func (o SnapshotOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The id of the source instance from which this snapshot was derived. - If the value of this attribute changes, the
// resource will be replaced.
func (o SnapshotOutput) SourceInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.SourceInstanceId }).(pulumi.StringPtrOutput)
}

// The id of the source snapshot from which this snapsot was derived. - If the value of this attribute changes, the
// resource will be replaced.
func (o SnapshotOutput) SourceSnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.SourceSnapshotId }).(pulumi.StringPtrOutput)
}

// The snapshot status.
func (o SnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SnapshotOutput) Timeouts() SnapshotTimeoutsPtrOutput {
	return o.ApplyT(func(v *Snapshot) SnapshotTimeoutsPtrOutput { return v.Timeouts }).(SnapshotTimeoutsPtrOutput)
}

type SnapshotArrayOutput struct{ *pulumi.OutputState }

func (SnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) Index(i pulumi.IntInput) SnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].([]*Snapshot)[vs[1].(int)]
	}).(SnapshotOutput)
}

type SnapshotMapOutput struct{ *pulumi.OutputState }

func (SnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (o SnapshotMapOutput) ToSnapshotMapOutput() SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) MapIndex(k pulumi.StringInput) SnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].(map[string]*Snapshot)[vs[1].(string)]
	}).(SnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotInput)(nil)).Elem(), &Snapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotArrayInput)(nil)).Elem(), SnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotMapInput)(nil)).Elem(), SnapshotMap{})
	pulumi.RegisterOutputType(SnapshotOutput{})
	pulumi.RegisterOutputType(SnapshotArrayOutput{})
	pulumi.RegisterOutputType(SnapshotMapOutput{})
}

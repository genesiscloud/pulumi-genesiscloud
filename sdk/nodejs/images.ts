// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Images data source
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as genesiscloud from "@pulumi/genesiscloud";
 *
 * const base-os-images = genesiscloud.Images({
 *     filter: {
 *         type: "base-os",
 *     },
 * });
 * const snapshots = genesiscloud.Images({
 *     filter: {
 *         region: "ARC-IS-HAF-1",
 *         type: "snapshot",
 *     },
 * });
 * const preconfigured-images = genesiscloud.Images({
 *     filter: {
 *         type: "preconfigured",
 *     },
 * });
 * ```
 */
export function images(args: ImagesArgs, opts?: pulumi.InvokeOptions): Promise<ImagesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("genesiscloud:index/images:Images", {
        "filter": args.filter,
        "timeouts": args.timeouts,
    }, opts);
}

/**
 * A collection of arguments for invoking Images.
 */
export interface ImagesArgs {
    filter: inputs.ImagesFilter;
    timeouts?: inputs.ImagesTimeouts;
}

/**
 * A collection of values returned by Images.
 */
export interface ImagesResult {
    readonly filter: outputs.ImagesFilter;
    readonly id: string;
    readonly images: outputs.ImagesImage[];
    readonly timeouts?: outputs.ImagesTimeouts;
}
/**
 * Images data source
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as genesiscloud from "@pulumi/genesiscloud";
 *
 * const base-os-images = genesiscloud.Images({
 *     filter: {
 *         type: "base-os",
 *     },
 * });
 * const snapshots = genesiscloud.Images({
 *     filter: {
 *         region: "ARC-IS-HAF-1",
 *         type: "snapshot",
 *     },
 * });
 * const preconfigured-images = genesiscloud.Images({
 *     filter: {
 *         type: "preconfigured",
 *     },
 * });
 * ```
 */
export function imagesOutput(args: ImagesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ImagesResult> {
    return pulumi.output(args).apply((a: any) => images(a, opts))
}

/**
 * A collection of arguments for invoking Images.
 */
export interface ImagesOutputArgs {
    filter: pulumi.Input<inputs.ImagesFilterArgs>;
    timeouts?: pulumi.Input<inputs.ImagesTimeoutsArgs>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { FilesystemArgs, FilesystemState } from "./filesystem";
export type Filesystem = import("./filesystem").Filesystem;
export const Filesystem: typeof import("./filesystem").Filesystem = null as any;
utilities.lazyLoad(exports, ["Filesystem"], () => require("./filesystem"));

export { FloatingIpArgs, FloatingIpState } from "./floatingIp";
export type FloatingIp = import("./floatingIp").FloatingIp;
export const FloatingIp: typeof import("./floatingIp").FloatingIp = null as any;
utilities.lazyLoad(exports, ["FloatingIp"], () => require("./floatingIp"));

export { ImagesArgs, ImagesResult, ImagesOutputArgs } from "./images";
export const images: typeof import("./images").images = null as any;
export const imagesOutput: typeof import("./images").imagesOutput = null as any;
utilities.lazyLoad(exports, ["images","imagesOutput"], () => require("./images"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecurityGroupArgs, SecurityGroupState } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SSHKeyArgs, SSHKeyState } from "./sshkey";
export type SSHKey = import("./sshkey").SSHKey;
export const SSHKey: typeof import("./sshkey").SSHKey = null as any;
utilities.lazyLoad(exports, ["SSHKey"], () => require("./sshkey"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "genesiscloud:index/filesystem:Filesystem":
                return new Filesystem(name, <any>undefined, { urn })
            case "genesiscloud:index/floatingIp:FloatingIp":
                return new FloatingIp(name, <any>undefined, { urn })
            case "genesiscloud:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "genesiscloud:index/sSHKey:SSHKey":
                return new SSHKey(name, <any>undefined, { urn })
            case "genesiscloud:index/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "genesiscloud:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "genesiscloud:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("genesiscloud", "index/filesystem", _module)
pulumi.runtime.registerResourceModule("genesiscloud", "index/floatingIp", _module)
pulumi.runtime.registerResourceModule("genesiscloud", "index/instance", _module)
pulumi.runtime.registerResourceModule("genesiscloud", "index/sSHKey", _module)
pulumi.runtime.registerResourceModule("genesiscloud", "index/securityGroup", _module)
pulumi.runtime.registerResourceModule("genesiscloud", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("genesiscloud", "index/volume", _module)
pulumi.runtime.registerResourcePackage("genesiscloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:genesiscloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

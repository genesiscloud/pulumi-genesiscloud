// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * InstanceStatus resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as genesiscloud from "@genesiscloud/pulumi-genesiscloud";
 *
 * const exampleInstance = new genesiscloud.Instance("exampleInstance", {
 *     region: "NORD-NO-KRS-1",
 *     image: "ubuntu:22.04",
 *     type: "vcpu-2_memory-4g",
 *     sshKeyIds: ["my-ssh-key-id"],
 * });
 * const exampleInstanceStatus = new genesiscloud.InstanceStatus("exampleInstanceStatus", {
 *     instanceId: exampleInstance.id,
 *     status: "active",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import genesiscloud:index/instanceStatus:InstanceStatus example 18efeec8-94f0-4776-8ff2-5e9b49c74608
 * ```
 */
export class InstanceStatus extends pulumi.CustomResource {
    /**
     * Get an existing InstanceStatus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceStatusState, opts?: pulumi.CustomResourceOptions): InstanceStatus {
        return new InstanceStatus(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesiscloud:index/instanceStatus:InstanceStatus';

    /**
     * Returns true if the given object is an instance of InstanceStatus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceStatus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceStatus.__pulumiType;
    }

    /**
     * The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The target instance status. - The value must be one of: ["active" "stopped"].
     */
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.InstanceStatusTimeouts | undefined>;

    /**
     * Create a InstanceStatus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceStatusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceStatusArgs | InstanceStatusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceStatusState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as InstanceStatusArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceStatus.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceStatus resources.
 */
export interface InstanceStatusState {
    /**
     * The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The target instance status. - The value must be one of: ["active" "stopped"].
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.InstanceStatusTimeouts>;
}

/**
 * The set of arguments for constructing a InstanceStatus resource.
 */
export interface InstanceStatusArgs {
    /**
     * The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The target instance status. - The value must be one of: ["active" "stopped"].
     */
    status: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.InstanceStatusTimeouts>;
}

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceStatusArgs', 'InstanceStatus']

@pulumi.input_type
class InstanceStatusArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 status: pulumi.Input[str],
                 timeouts: Optional[pulumi.Input['InstanceStatusTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a InstanceStatus resource.
        :param pulumi.Input[str] instance_id: The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
        :param pulumi.Input[str] status: The target instance status. - The value must be one of: ["active" "stopped"].
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        The target instance status. - The value must be one of: ["active" "stopped"].
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['InstanceStatusTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['InstanceStatusTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _InstanceStatusState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['InstanceStatusTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering InstanceStatus resources.
        :param pulumi.Input[str] instance_id: The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
        :param pulumi.Input[str] status: The target instance status. - The value must be one of: ["active" "stopped"].
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The target instance status. - The value must be one of: ["active" "stopped"].
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['InstanceStatusTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['InstanceStatusTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


class InstanceStatus(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['InstanceStatusTimeoutsArgs', 'InstanceStatusTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        InstanceStatus resource

        ## Example Usage

        ```python
        import pulumi
        import pulumi_genesiscloud as genesiscloud

        example_instance = genesiscloud.Instance("exampleInstance",
            region="NORD-NO-KRS-1",
            image="ubuntu:22.04",
            type="vcpu-2_memory-4g",
            ssh_key_ids=["my-ssh-key-id"])
        example_instance_status = genesiscloud.InstanceStatus("exampleInstanceStatus",
            instance_id=example_instance.id,
            status="active")
        ```

        ## Import

        ```sh
        $ pulumi import genesiscloud:index/instanceStatus:InstanceStatus example 18efeec8-94f0-4776-8ff2-5e9b49c74608
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
        :param pulumi.Input[str] status: The target instance status. - The value must be one of: ["active" "stopped"].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceStatusArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        InstanceStatus resource

        ## Example Usage

        ```python
        import pulumi
        import pulumi_genesiscloud as genesiscloud

        example_instance = genesiscloud.Instance("exampleInstance",
            region="NORD-NO-KRS-1",
            image="ubuntu:22.04",
            type="vcpu-2_memory-4g",
            ssh_key_ids=["my-ssh-key-id"])
        example_instance_status = genesiscloud.InstanceStatus("exampleInstanceStatus",
            instance_id=example_instance.id,
            status="active")
        ```

        ## Import

        ```sh
        $ pulumi import genesiscloud:index/instanceStatus:InstanceStatus example 18efeec8-94f0-4776-8ff2-5e9b49c74608
        ```

        :param str resource_name: The name of the resource.
        :param InstanceStatusArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceStatusArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['InstanceStatusTimeoutsArgs', 'InstanceStatusTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceStatusArgs.__new__(InstanceStatusArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["timeouts"] = timeouts
        super(InstanceStatus, __self__).__init__(
            'genesiscloud:index/instanceStatus:InstanceStatus',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[Union['InstanceStatusTimeoutsArgs', 'InstanceStatusTimeoutsArgsDict']]] = None) -> 'InstanceStatus':
        """
        Get an existing InstanceStatus resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
        :param pulumi.Input[str] status: The target instance status. - The value must be one of: ["active" "stopped"].
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceStatusState.__new__(_InstanceStatusState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        return InstanceStatus(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of the instance this refers to. - If the value of this attribute changes, the resource will be replaced.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The target instance status. - The value must be one of: ["active" "stopped"].
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.InstanceStatusTimeouts']]:
        return pulumi.get(self, "timeouts")

